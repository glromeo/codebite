"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMessaging = void 0;
const chalk_1 = __importDefault(require("chalk"));
const esnext_web_modules_1 = require("esnext-web-modules");
const nano_memoize_1 = __importDefault(require("nano-memoize"));
const tiny_node_logger_1 = __importDefault(require("tiny-node-logger"));
const ws_1 = __importDefault(require("ws"));
const multi_map_1 = require("./util/multi-map");
const watcher_1 = require("./watcher");
exports.useMessaging = (0, nano_memoize_1.default)((options) => {
    var _a, _b;
    const sockets = new Set();
    function broadcast(type, data) {
        const message = data === undefined ? type : JSON.stringify({ type, data });
        for (const ws of sockets) {
            ws.send(message);
        }
    }
    const callbacks = new multi_map_1.MultiMap();
    function on(type, cb) {
        callbacks.add(type, cb);
        tiny_node_logger_1.default.debug("added message listener for:", chalk_1.default.magenta(type));
    }
    const watcher = (0, watcher_1.useWatcher)(options);
    for (const plugin of (_b = (_a = options.messaging) === null || _a === void 0 ? void 0 : _a.plugins) !== null && _b !== void 0 ? _b : []) {
        plugin({ on, broadcast, options, watcher });
    }
    function openCallback(ws) {
        function send(type, data) {
            const message = data === undefined ? type : JSON.stringify({ type, data });
            return ws.send(message);
        }
        tiny_node_logger_1.default.debug("client connected:", ws.url);
        sockets.add(ws);
        ws.on("error", () => {
            tiny_node_logger_1.default.debug("client error:", ws.url);
        });
        ws.on("close", () => {
            tiny_node_logger_1.default.debug("client disconnected:", ws.url);
            sockets.delete(ws);
        });
        ws.on("message", function (message) {
            const { type, data } = message.charAt(0) === "{" ? JSON.parse(message) : { type: message };
            if (callbacks.has(type))
                for (const callback of callbacks.get(type)) {
                    callback(data, send);
                }
        });
        ws.send(JSON.stringify({ type: "hello", data: { time: new Date().toUTCString() } }));
    }
    function errorCallback(error) {
        tiny_node_logger_1.default.error("websocket error:", error);
    }
    function closeCallback() {
        tiny_node_logger_1.default.info("websocket closed");
    }
    esnext_web_modules_1.notifications.on("create", (notification) => {
        broadcast("notification:new", notification);
    });
    esnext_web_modules_1.notifications.on("update", (notification) => {
        broadcast("notification:update", notification);
    });
    return {
        handleUpgrade(req, socket, head) {
            if (req.headers["sec-websocket-protocol"] === "esnext-dev") {
                const wss = new ws_1.default.Server({ noServer: true });
                wss.on("open", openCallback);
                wss.on("error", errorCallback);
                wss.on("close", closeCallback);
                wss.handleUpgrade(req, socket, head, client => wss.emit("open", client, req));
                tiny_node_logger_1.default.info("websocket ready");
            }
        },
        broadcast
    };
});
//# sourceMappingURL=data:application/json;base64,